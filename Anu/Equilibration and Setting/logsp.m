function logthis = logsp(obj,all,spclust,extra)
% -------------------------------------------------------------------------
%                  logsp(obj,all,spclust,extra)
% -------------------------------------------------------------------------
% 'logsp' changes the identity of the species in the model "obj" whose time
% series will be reported. There are several options. This script was written 
% for speeding up the selection process which can be exceedingly slow using 
% the Simbiology desktop. The arguments of the function are,
%     obj: The simbiology object model.
%     all: A boolean to defined if all the species must be logged (1) or 
%          just a subset of them. This is the one to use before
%          equilibrating the system. all = 1 overrides any value set in the
%          following two arguments.
% spclust: In case all = 0, this integer defines which predefined subset of
%          species are to be logged. In case it is a vector of integers,
%          the different cases defined by them will be aggreagated. If no
%          predefined set is to be chosen, spclust = 0.
%   extra: This enables the user to define which species to log and must be
%          coupled to spclust = 0 to be read. It is a cell structure with 
%          two columns, one for the compartment name and one for the species 
%          name, and as many rows as species to be logged. The species 
%          defined in "extra" can be aggregated with predefined sets if 
%          "spclust" is a vector of integers.
%{
The predefined clusters (so far) are,
0: User defined ('extra' argument)
1: Species beginning with 'total'.
2: DA/D1R/Golf/AC5/cAMP/PKA/DARP32/PP1/STEP axis
3: RASGRF/RAS/RAF/MEK/ERK axis
4: D1R&Golf partition
5: Fyn/NR2B
%}

            cnfst = getconfigset(obj);
if all
    set(cnfst.RuntimeOptions, 'StatesToLog', obj.species);
    
            objsp = obj.species;
	for i = 1:length(objsp)
        if i == 1
      speciesobjt = objsp(i);
         tologall = {objsp(i).Parent.name,objsp(i).name};
        else
      speciesobjt = [speciesobjt, objsp(i)];
         tologall = [tologall; {objsp(i).Parent.name,objsp(i).name}];
        end
    end
else
          compall = get(obj,'Compartment');
    for i = 1:length(compall)
           cmp{i} = compall(i).name;
    end

     tolog = {'Spine','Ca';...
              'Spine','DA';...
              'Spine','ACh'};
          
    for i = 1:size(tolog,1)
            incmp = strmatch(tolog{i,1},cmp(:));            
        if i == 1
      speciesobjt = sbioselect(compall(incmp),'Name', tolog{i,2});
        else
      speciesobjt = [speciesobjt, sbioselect(compall(incmp),'Name', tolog{i,2})];
        end
    end     
          
         tologall = tolog;
       speciesobj = speciesobjt;
       
% This is just for user defined "extra"
            for i = 1:size(extra)
             punt = regexp(extra{i},'\.');             
            incmp = strmatch(extra{i}(1:punt-1),cmp(:));
                if i == 1
      speciesobjt = sbioselect(compall(incmp),'Name', extra{i}(punt+1:end));
            tolog = {extra{i}(1:punt-1),extra{i}(punt+1:end)};
                else
      speciesobjt = [speciesobjt, sbioselect(compall(incmp),'Name', extra{i}(punt+1:end))];
            tolog = [tolog; {extra{i}(1:punt-1),extra{i}(punt+1:end)}];
                end
            end
            
for k = 1:length(spclust)
    switch spclust(k)
        case 1
               ct = 0;
            objsp = obj.species;
            for i = 1:length(objsp)
            match = strmatch('total',objsp(i).name);
                if ~isempty(match)
               ct = ct + 1;
                    if ct == 1
      speciesobjt = objsp(i);
            tolog = {objsp(i).Parent.name,objsp(i).name};
                    else
      speciesobjt = [speciesobjt, objsp(i)];
            tolog = [tolog; {objsp(i).Parent.name,objsp(i).name}];
                    end
                end
            end    

        case 2                          
            
     tolog = {'Spine','D1RLG';...
              'Spine','Gbgolf';...
              'Spine','AC5';...
              'Spine','cAMP';...
              'Spine','PKAreg';...
              'Spine','PKAact';...
              'Spine','PP1';...         
              'Spine','totalSTEPact';...               
              'Spine','totalD32p34';...
              'Spine','totalD32p75';...
              'Spine','totalGluR1p'};                      
            
        case 3
            
     tolog = {'Spine','RASGRFact';...
              'Spine','RASxGTP';...              
              'Spine','totalRASact';...
              'Spine','totalRAFact';...
              'Spine','totalMEKact';...
              'Spine','STEPp*PP1';...
              'Spine','ERKpp*STEP';...
              'Spine','totalERKact';...
              'Spine','MKP1mRNA';...
              'Spine','totalMKP'};
          
        case 4
            
     tolog = {'Spine','totalD1R';...
              'Spine','totalD1Rc';...
              'Spine','totalD1Rm';...
              'Spine','totalGolf';...
              'Spine','totalGolfc';...
              'Spine','totalGolfm'};          
                                           
        case 5
            
     tolog = {'Spine','actNR2B';...
              'Spine','actFyn';...
              'Spine','scaleCa';...
              'Spine','scaleSChCaS';...
              'Spine','scaleSChCa';...
              'Spine','scaleTfCa'};

       case 6
           
     tolog = {'Spine','M4Rfree';...
              'Spine','Gi';...
              'Spine','GaiGDP';...
              'Spine','GaiGTP';...
              'Spine','Gbgi'};      
                    
       case 7
           
     tolog = {'Spine','TF';...
              'Spine','TFact';...
              'Spine','ERKpp*TF';...
              'Spine','DNA';...
              'Spine','TF*DNA';...
              'Spine','MKP1mRNA';...
              'Spine','MKP*ERKp';...
              'Spine','MKP*ERKpp'};    
          
       case 8
       
     tolog = {'Spine','STEPp*PP1';...
              'Spine','STEP*PKA';...
              'Spine','STEP*ERKc'};
       
       case 9
            
     tolog = {'Spine','Fynpapi*STEP';...
              'Spine','Fynpa*STEP';...
              'Spine','NR2Bpi*STEP';...
              'Spine','NR2BpipS*STEP';...
              'Spine','NR2Bpact*STEP';...
              'Spine','NR2BpactpS*STEP'};
          
       case 10
            
     tolog = {'Spine','ACinh';...
              'Spine','ACact';...
              'Spine','AC5*ATP';...
              'Spine','AC5GaiGTP*ATP';...              
              'Spine','AC5GaolfGTP*ATP';...
              'Spine','AC5GaolfGTPGaiGTP*ATP';...              
              'Spine','AC5Ca*ATP';...
              'Spine','AC5CaGaiGTP*ATP';...              
              'Spine','AC5CaGaolfGTP*ATP';...
              'Spine','AC5CaGaolfGTPGaiGTP*ATP'};
          
        case 11
            
     tolog = {'Spine','D1R';...
              'Spine','D1RDA';...
              'Spine','D1RG';...
              'Spine','D1RDAGolf'};
                    
        case 12
            
     tolog = {'Spine','M4R';...
              'Spine','M4RACh';...
              'Spine','M4RGi';...
              'Spine','M4RAChGi';...
              'Spine','totalM4RACh';...
              'Spine','totalM4RG'};
          
        case 13
            
     tolog = {'Spine','D1R';...
              'Spine','D1RDA';...
              'Spine','D1RGolf';...
              'Spine','D1RDAGolf';...
              'Spine','totalD1RDA';...
              'Spine','totalD1RG';...
              'Spine','Golf';...
              'Spine','GaolfGTP';...
              'Spine','GaolfGDP';...
              'Spine','Gbgolf';...
              'Spine','ACact'};
                
          
    %{
          tolog = {'Spine','totalNR2Bact';...
              'Spine','totalFyn';...
              'Spine','totalFynf';...
              'Spine','totalFynpa';...
              'Spine','totalFynpi';...
              'Spine','totalFynpapi';...
              'Spine','totalFynact';...
              'Spine','Fynpapi*STEP';...
              'Spine','Fynpapi*JUMP';...
              'Spine','Fynpapi*PTP';...
              'Spine','NR2Bi*Fynpapi';...
              'Spine','NR2Bact*Fynpapi';...
              'Spine','actNR2B';...
              'Spine','totalNR2Bp';...
              'Spine','actFyn';...
              'Spine','scaleCa'};         
              
          
     tolog = {'Spine','ThD1R';...
              'Spine','totalGaolf';...
              'Spine','Gaolf-GTP';...
              'Spine','ACinh';...
              'Spine','ACact';...
              'Spine','ThM4R';...
              'Spine','M4Rfree';...
              'Spine','Gi';...
              'Spine','Gia-GDP';...
              'Spine','Gia-GTP';...
              'Spine','Gbgi'};              
          %}
          
    end    
    
    if spclust(k) > 1
        for i = 1:size(tolog,1)
            incmp = strmatch(tolog{i,1},cmp(:));            
            if i == 1
      speciesobjt = sbioselect(compall(incmp),'Name', tolog{i,2});
            else
      speciesobjt = [speciesobjt, sbioselect(compall(incmp),'Name', tolog{i,2})];
            end
        end
    end        
         tologall = [tologall; tolog];
       speciesobj = [speciesobj, speciesobjt];
end        
    set(cnfst.RuntimeOptions, 'StatesToLog', speciesobj);    
end
    for i = 1:size(tologall,1)
       logthis{i} = [tologall{i,1},'.',tologall{i,2}];
    end
end