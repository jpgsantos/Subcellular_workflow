function f_setup_input(stg,mmf)
% Creates code that loads the inputs of each experiment into a .mat file,
% and creates the code to read this inputs at runtime when the experiments
% are being simulated, all this generated code is stored on the
% Input_functions folder

matlab_model = mmf.model.data.mat_model;
data_model = mmf.model.data.data_model;
inp_model_data = mmf.model.data.input_model_data;
Model_folder = mmf.model.main;
model_input = mmf.model.input_functions.input;

%Find correct path for loading depending on the platform
load(data_model,'sbtab')

load(matlab_model,'modelobj');

for Exp_n = 1:size(sbtab.datasets,2)
    
    for index = 1:size(sbtab.datasets(Exp_n).input,2)
        if size(sbtab.datasets(Exp_n).input_value{index},2) > 100
            
            input_name = strrep(modelobj.species(1+str2double(strrep(...
                sbtab.datasets(Exp_n).input(index),'S',''))).name,".","");
            inpX = input_name + "X";
            inpT = input_name + "T";
            inph1 = input_name + "h1";
            inph2 = input_name + "h2";
            
            fullFileName = sprintf('%s.m',...
                model_input + Exp_n + "_" + input_name  );
            
            fileID = fopen(fullFileName, 'wt');

            inp_str = template1();
            inp_str = replace(inp_str,...
                ["SBtab_name","Exp_n","input_name",...
                "inpX", "inpT", "inph1", "inph2", "inp_model_data",...
                "sbtab.sim_time(Exp_n)"],[stg.name,Exp_n,...
                input_name, inpX, inpT, inph1,...
                inph2, inp_model_data,...
                sbtab.sim_time(Exp_n)]);

            fprintf(fileID,inp_str);
            fclose(fileID);
        end
    end
end

fullFileName = sprintf('%s.m',model_input + "_creator"  );

fileID = fopen(fullFileName, 'wt');
fprintf(fileID, "function " + stg.name + "_input_creator(~)\n");
helper = 0;
for Exp_n = 1:size(sbtab.datasets,2)
    for index =1:size(sbtab.datasets(Exp_n).input,2)
        if size(sbtab.datasets(Exp_n).input_value{index},2) > 100
            input_name = strrep(modelobj.species(1+str2double(strrep(...
                sbtab.datasets(Exp_n).input(index),'S',''))).name,".","");
            if helper == 0
                helper = 1;
                helper2 = Exp_n;
            end
            if index == 1 && Exp_n == helper2
                fprintf(fileID,"load('" + data_model + "','sbtab');\n");
                inp_creator_str = template2();
                inp_creator_str = replace(inp_creator_str,...
                    ["Exp_n", "input_name", "index", "inp_model_data"],...
                    [Exp_n, input_name, index, inp_model_data]);
                %                 fprintf(fileID,inp_creator_str);
            else
                inp_creator_str = template3();
                inp_creator_str = replace(inp_creator_str,...
                    ["Exp_n", "input_name", "index", "inp_model_data"],...
                    [Exp_n, input_name, index, inp_model_data]);
            end
            fprintf(fileID,inp_creator_str);
        end
    end
end
fprintf(fileID, "end\n");
fclose(fileID);

addpath(genpath(Model_folder));
eval(stg.name + "_input_creator()");
end

function inp_str = template1()
inp_str =...
    "function thisAmp = SBtab_name_inputExp_n_input_name(times)\n"+...
    "persistent inpX\n"+...
    "persistent inpT\n"+...
    "persistent inph1\n"+...
    "persistent inph2\n"+...
    "if isempty(inpX)\n"+...
        "Data = coder.load('inp_model_data','expExp_n_input_name');\n"+...
        "inpX = Data.expExp_n_input_name(:,2);\n"+...
        "inpT = Data.expExp_n_input_name(:,1);\n"+...
        "inph1 = 1;\n"+...
    "end\n"+...
    "thisAmp = inpX(end);\n"+...
    "if times ~= sbtab.sim_time(Exp_n)\n"+...
        "if times == 0\n"+...
            "inph1 = 1;\n"+...
            "thisAmp = inpX(1);\n"+...
            "else\n"+...
            "while times > inpT(inph1)\n"+...
            "inph1 = inph1 + 1;\n"+...
        "end\n"+...
        "while times < inpT(inph1-1)\n"+...
            "inph1  = inph1-1;\n"+...
            "end\n"+...
            "inph2 = (inpT(inph1)-times)*1/(inpT(inph1)-inpT(inph1-1));\n"+...
            "thisAmp = (inpX(inph1-1)*inph2 + inpX(inph1)*(1-inph2));\n"+...
        "end\n"+...
    "end\n"+...
    "end";
end


function inp_creator_str = template2()
inp_creator_str = ...
    "expExp_n_input_name(:,1) = sbtab.datasets(Exp_n).input_time{index};\n"+...
    "expExp_n_input_name(:,2) = sbtab.datasets(Exp_n).input_value{index};\n"+...
    "save('inp_model_data','expExp_n_input_name');\n";
end
function inp_creator_str = template3()
inp_creator_str = ...
    "expExp_n_input_name(:,1) = sbtab.datasets(Exp_n).input_time{index};\n"+...
    "expExp_n_input_name(:,2) = sbtab.datasets(Exp_n).input_value{index};\n"+...
    "save('inp_model_data','expExp_n_input_name','-append');\n";
end