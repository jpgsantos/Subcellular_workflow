clear
clc

% %% Import data from spreadsheet
% % Script for importing data from the following spreadsheet:
% %
% %    Workbook: C:\Users\Admin\Documents\GitHub\Subcellular_Workflow_Matlab\pre_data.xlsx
% %    Worksheet: Folha1
% %
% % Auto-generated by MATLAB on 12-Oct-2020 18:37:31
% 
% %% Set up the Import Options and import the data
% opts = spreadsheetImportOptions("NumVariables", 15);
% 
% % Specify sheet and range
% opts.Sheet = "Folha1";
% opts.DataRange = "A2:O13";
% 
% % Specify column names and types
% opts.VariableNames = ["name", "mean_final_level", "mean_final_level_sigma", "rise_time_start", "delay_rise_time", "delay_rise_time_sigma", "mean_rise_time", "sigma_rise_time", "fall_time_start", "delay_fall_time", "delay_fall_time_sigma", "mean_fall_time", "sigma_fall_time", "end_time", "number_points"];
% opts.VariableTypes = ["string", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double"];
% 
% % Specify variable properties
% opts = setvaropts(opts, "name", "WhitespaceRule", "preserve");
% opts = setvaropts(opts, "name", "EmptyFieldRule", "auto");
% 
% % Import the data
% tbl = readtable("Raw_M_Current_Model_Data.xlsx", opts, "UseExcel", false);
% 
% %% Convert to output type
% name = tbl.name;
% mean_final_level = tbl.mean_final_level;
% mean_final_level_sigma = tbl.mean_final_level_sigma;
% rise_time_start = tbl.rise_time_start;
% delay_rise_time = tbl.delay_rise_time;
% delay_rise_time_sigma = tbl.delay_rise_time_sigma;
% mean_rise_time = tbl.mean_rise_time;
% sigma_rise_time = tbl.sigma_rise_time;
% fall_time_start = tbl.fall_time_start;
% delay_fall_time = tbl.delay_fall_time;
% delay_fall_time_sigma = tbl.delay_fall_time_sigma;
% mean_fall_time = tbl.mean_fall_time;
% sigma_fall_time = tbl.sigma_fall_time;
% end_time = tbl.end_time;
% number_points = tbl.number_points;






name(:) = ["example1","example2","example3","example4"];
mean_final_level(:) = [1,-1,1,-1];
mean_final_level_sigma(:) = [0.05,0.05,0.05,0.05];
rise_time_start(:) = [2,2,2,2];
delay_rise_time(:) = [0,0,0,0];
delay_rise_time_sigma(:) = [0,0,0,0];
mean_rise_time(:) = [0.1,0.1,0.2,0.2];
sigma_rise_time(:) = [0.005,0.005,0.005,0.005];
fall_time_start(:) = [5,5,5,5];
delay_fall_time(:) = [0,0,0,0];
delay_fall_time_sigma(:) = [0,0,0,0];
mean_fall_time(:) = [0.2,0.2,0.4,0.4];
sigma_fall_time(:) = [0.005,0.005,0.005,0.005];
end_time(:) = [10,10,10,10];
number_points(:) = [100,100,100,100];

%% Clear temporary variables
clear opts tbl

% i = 1;
samples = 10000;
% 
% sigma = 10/(7^(1/2));
% mu(i) = -10;

% mean_final_level(1:12) = [0.19	0.39	0.63	0.78	1	1.05	1.05	1	0.95	-1	0.94	-1];
% mean_final_level_sigma(1:12) = [0.003779645	0.003779645	0.003779645	0.003779645	0.003779645	0.003779645	0.003779645	0.070710678	0.064282435	0.041594517	0.031622777	0.014536412];
% 
% rise_time_start(1:12) = 2;
% rise_time_start_sigma(1:12) = 0;
% 
% mean_rise_time(1:12) = 109;
% sigma_rise_time(1:12) = 10/(7^(1/2));
% 
% fall_time_start(1:12) = 5;
% fall_time_start_sigma(1:12) = 0;
% 
% mean_fall_time(1:12) = 51.3;
% sigma_fall_time(1:12) = 1.9/(7^(1/2));

% end_time = 10;

% pd(i) = makedist('Normal','mu',mu(i),...
%     'sigma',sigma);
% % t(i) = truncate(pd(i),stg.lb(i),stg.ub(i));
% r{i} = random(t(i),samples,1);
% r2{i} = random(t(i),samples,1);
% M1(:,i) = r{i};
% M2(:,i) = r2{i};
eps = 10^-4;

clf
parfor i = 1:size(name,2)
rise_time_dist(i) = makedist('Normal','mu',mean_rise_time(i),'sigma',sigma_rise_time(i));
rise_time_dist_samples{i} = random(rise_time_dist(i),samples,1);

if delay_rise_time(i) ~= 0
delay_rise_time_dist(i) = makedist('Normal','mu',delay_rise_time(i),'sigma',delay_rise_time_sigma(i));
delay_rise_time_dist(i) = truncate(delay_rise_time_dist(i) ,0,fall_time_start(i)-rise_time_start(i));
delay_rise_time_dist_samples{i} = random(delay_rise_time_dist(i),samples,1);
else
delay_rise_time_dist_samples{i} = zeros(samples,1);
end

fall_time_dist(i) = makedist('Normal','mu',mean_fall_time(i),'sigma',sigma_fall_time(i));
fall_time_dist_samples{i} = random(fall_time_dist(i),samples,1);


if delay_fall_time(i) ~= 0
delay_fall_time_dist(i) = makedist('Normal','mu',delay_fall_time(i),'sigma',delay_fall_time_sigma(i));
delay_fall_time_dist(i) = truncate(delay_fall_time_dist(i) ,0,end_time(i)-fall_time_start(i));
delay_fall_time_dist_samples{i} = random(delay_fall_time_dist(i),samples,1);
else
delay_fall_time_dist_samples{i} = zeros(samples,1);  
end

Max_level_dist(i) = makedist('Normal','mu',mean_final_level(i),'sigma',mean_final_level_sigma(i));
Max_level_dist(i) = truncate(Max_level_dist(i),-1,1);
Max_level_dist_samples{i} = random(Max_level_dist(i),samples,1);
% Max_level_dist_samples1 = random(Max_level_dist,samples,1);

% t{i} = zeros(end_time(i)*10+1,1);
% Exponent_curve{i} = zeros(samples,end_time(i)*10+1);
% Exponent_curve_sd{i} = zeros(end_time(i)*10+1,1);
t{i} = zeros(number_points(i)+1,1);
Exponent_curve{i} = zeros(samples,number_points(i)+1);
Exponent_curve_sd{i} = zeros(number_points(i)+1,1);

for m = 1:number_points(i)+1
    t{i}(m)=(m-1)/(number_points(i)/end_time(i));
    
    if t{i}(m) < rise_time_start(i)
        if mean_final_level(i) < 0
            Exponent_curve{i}(:,m) = 1;
        end
    elseif t{i}(m) < fall_time_start(i)
        for n =1:samples
            if mean_final_level(i) > 0
                Exponent_curve{i}(n,m) = Max_level_dist_samples{i}(n)*(1-exp(-(max(0,t{i}(m)-rise_time_start(i)-delay_rise_time_dist_samples{i}(n)))/rise_time_dist_samples{i}(n)));
            elseif mean_final_level(i) < 0
                Exponent_curve{i}(n,m) = 1+(Max_level_dist_samples{i}(n)*(1-exp(-(max(0,t{i}(m)-rise_time_start(i)-delay_rise_time_dist_samples{i}(n)))/rise_time_dist_samples{i}(n))));
            end
        end
    else
        for n =1:samples
            if mean_final_level(i) > 0
                Exponent_curve{i}(n,m) = Max_level_dist_samples{i}(n)*(1-exp(-(max(0,t{i}(m)-rise_time_start(i)-delay_rise_time_dist_samples{i}(n)))/rise_time_dist_samples{i}(n)))-...
                    Max_level_dist_samples{i}(n)*(1-exp(-(max(0,t{i}(m)-fall_time_start(i)-delay_fall_time_dist_samples{i}(n)))/fall_time_dist_samples{i}(n)));
            elseif mean_final_level(i) < 0
                Exponent_curve{i}(n,m) = 1+(Max_level_dist_samples{i}(n)*(1-exp(-(max(0,t{i}(m)-rise_time_start(i)-delay_rise_time_dist_samples{i}(n)))/rise_time_dist_samples{i}(n)))-...
                    Max_level_dist_samples{i}(n)*(1-exp(-(max(0,t{i}(m)-fall_time_start(i)-delay_fall_time_dist_samples{i}(n)))/fall_time_dist_samples{i}(n))));
            end
        end
    end
    
Exponent_curve_sd{i}(m) = max(eps,(sum((max(0,Exponent_curve{i}(:,m))-mean(max(0,Exponent_curve{i}(:,m)))).^2)/samples)^(1/2));
Exponent_curve_mean2{i}(m) = mean(max(0,Exponent_curve{i}(:,m)));
end


% for m = 1:rise_time_start(i)*10+1
%     t{i}(m)=(m-1)/10;
% %     t{i}(m)=(m-1)*(rise_time_start(i)/t_points_init);
% if mean_final_level(i) < 0
%     Exponent_curve{i}(:,m) = 1;
% end
% end
% 
% % mean_final_level(i)
% 
% for m = rise_time_start(i)*10+1:fall_time_start(i)*10+1
%     
%     t{i}(m)=(m-1)/10;
% %     t{i}(m)=((m-1)-t_points_init)*((fall_time_start(i)-rise_time_start(i))/(t_points_mid))+rise_time_start(i);
%     for n =1:samples
% %         Max_level_dist_samples{i}(n)
% %         t{i}(m)-rise_time_start(i)
% %         rise_time_dist_samples{i}(n)
% %         max(0,t{i}(m)-rise_time_start(i)-delay_rise_time_dist_samples{i}(n))
%         if mean_final_level(i) > 0
%             Exponent_curve{i}(n,m) = Max_level_dist_samples{i}(n)*(1-exp(-(max(0,t{i}(m)-rise_time_start(i)-delay_rise_time_dist_samples{i}(n)))/rise_time_dist_samples{i}(n)));
%         elseif mean_final_level(i) < 0
%             Exponent_curve{i}(n,m) = 1+(Max_level_dist_samples{i}(n)*(1-exp(-(max(0,t{i}(m)-rise_time_start(i)-delay_rise_time_dist_samples{i}(n)))/rise_time_dist_samples{i}(n))));
%             
% %             Max_level_dist_samples{i}(n)
% %             t{i}(m)-rise_time_start(i)-delay_rise_time_dist_samples{i}(n)
%             
% %             Exponent_curve{i}(n,m) = Max_level_dist_samples{i}(n)*(1-exp(-(max(0,t{i}(m)-rise_time_start(i)-delay_rise_time_dist_samples{i}(n)))/rise_time_dist_samples{i}(n)));
%         end
%     end
% end
% 
% % for m = t_points_init+1+t_points_mid:t_points_init+1+t_points_mid+t_points_end
% for m = fall_time_start(i)*10+1:end_time(i)*10+1
%     t{i}(m)=(m-1)/10;
%     
% %     t{i}(m)=((m-1)-(t_points_init+t_points_mid))*((end_time(i)-fall_time_start(i))/(t_points_end))+fall_time_start(i);
% %     t(m)=(m)*100;
%     for n =1:samples
%         
%         if mean_final_level(i) > 0
%             
%             Exponent_curve{i}(n,m) = Max_level_dist_samples{i}(n)*(1-exp(-(max(0,t{i}(m)-rise_time_start(i)-delay_rise_time_dist_samples{i}(n)))/rise_time_dist_samples{i}(n)))-...
%                 Max_level_dist_samples{i}(n)*(1-exp(-(max(0,t{i}(m)-fall_time_start(i)-delay_fall_time_dist_samples{i}(n)))/fall_time_dist_samples{i}(n)));
%         elseif mean_final_level(i) < 0
%             Exponent_curve{i}(n,m) = 1+(Max_level_dist_samples{i}(n)*(1-exp(-(max(0,t{i}(m)-rise_time_start(i)-delay_rise_time_dist_samples{i}(n)))/rise_time_dist_samples{i}(n)))-...
%                 Max_level_dist_samples{i}(n)*(1-exp(-(max(0,t{i}(m)-fall_time_start(i)-delay_fall_time_dist_samples{i}(n)))/fall_time_dist_samples{i}(n))));
%         end
%         
%     end
% end

% for m = 1:end_time(i)*10+1
% Exponent_curve_sd{i}(m) = max(eps,(sum((Exponent_curve{i}(:,m)-mean(Exponent_curve{i}(:,m))).^2)/samples)^(1/2));
% Exponent_curve_mean2{i}(m) = max(0,mean(Exponent_curve{i}(:,m)));
% end

% for m = 1:end_time(i)*10+1
% Exponent_curve_sd_log{i}(m) = (sum((real(log10(eps1+Exponent_curve{i}(:,m)))-real(log10(mean(eps+Exponent_curve{i}(:,m))))).^2)/samples)^(1/2);
% Exponent_curve_mean2_log{i}(m) = mean(real(log10(eps+Exponent_curve{i}(:,m))));
% end

% for m = rise_time_start*100:fall_time_start*100
%     t(m)=(m-1)*10;
% %     for n =1:samples
%     Exponent_curve_mean1(m) = mean_Max_level*(1-exp(-t(m)/mean_rise_time));
% %     end
% end

% for m = 1:101
% Exponent_curve_dist(m) = makedist('Normal','mu',Exponent_curve_mean2(m),'sigma',Exponent_curve_sd(m));
% Exponent_curve_dist_samples(m,:) = random(Exponent_curve_dist(m),samples,1);
% end

% subplot(3,2,1)
% histogram(Exponent_curve(:,50))
% subplot(3,2,2)
% histogram(Exponent_curve_dist_samples(50,:))
% subplot(3,2,3)
% histogram(Exponent_curve(:,50)-mean(Exponent_curve(:,50)))
% subplot(3,2,5)
% histogram((Exponent_curve(:,50)-mean(Exponent_curve(:,50))).^2)
end

for i = 1:4
% clf
subplot(4,2,2*i-1)
% subplot(1,2,1)
hold on
% plot(t(:),Exponent_curve_mean1(:));
scatter(t{i}(:),Exponent_curve_mean2{i}(:),'.');
% scatter(t{i}(:),10.^Exponent_curve_mean2_log{i}(:),'.');
% plot(t{i}(:),Exponent_curve_mean2{i}(:)-Exponent_curve_sd{i}(:)*2);
% plot(t{i}(:),Exponent_curve_mean2{i}(:)+Exponent_curve_sd{i}(:)*2);
% plot(t{i}(:),10.^(Exponent_curve_mean2_log{i}(:)-Exponent_curve_sd{i}(:)*2),'.');
% plot(t{i}(:),10.^(Exponent_curve_mean2_log{i}(:)+Exponent_curve_sd{i}(:)*2),'.');

% hold off
% subplot(1,3,i+1)
% % subplot(1,2,2)
% hold on
% scatter(t{i}(:),Exponent_curve_sd{i},'.');
% % scatter(t{i}(:),Exponent_curve_sd_log{i},'.');
hold off
subplot(4,2,2*i)
errorbar(t{i}(:),Exponent_curve_mean2{i}(:),Exponent_curve_sd{i},'ok','LineWidth',0.5,'MarkerSize',1,'DisplayName',"test");
end

% % clf
% subplot(2,2,1)
% hold on
% for n =1:samples 
% scatter(t(:),Exponent_curve(n,:),1,'filled');
% end
% hold off
% 
% subplot(2,2,2)
% plot(t(:),Exponent_curve_sd);
% 
% subplot(2,2,3)
% hold on
% plot(t(:),Exponent_curve_mean1(:));
% plot(t(:),Exponent_curve_mean2(:));
% hold off
% 
%  subplot(2,2,4)
% hold on
% for n =1:samples
% scatter(t(:),Exponent_curve_dist_samples(:,n),1,'filled');
% end
% hold off

% r3{i} = log10((10^stg.ub(i))-10.^r{i});
% 
% 
% rtest=log10((10.^r{i})./(10.^r3{i}+10.^r{i}));
% 
% 
% subplot(1,3,1)
% histogram(r{i})
% 
% subplot(1,3,2)
% histogram(r3{i})
% 
% subplot(1,3,3)
% histogram(rtest)